/////////////////////////////////////////////////////////////////////////////////
//       ___          ___                     ___          ___
//      /__/|        /__/\       ___         /  /\        /__/\         ___
//     |  |:|        \  \:\     /  /\       /  /:/_       \  \:\       /  /\
//     |  |:|         \  \:\   /  /:/      /  /:/ /\       \__\:\     /  /:/
//   __|  |:|     _____\__\:\ /__/::\     /  /:/_/::\  ___ /  /::\   /  /:/
//  /__/\_|:|____/__/::::::::\\__\/\:\__ /__/:/__\/\:\/__/\  /:/\:\ /  /::\
//  \  \:\/:::::/\  \:\~~\~~\/   \  \:\/\\  \:\ /~~/:/\  \:\/:/__\//__/:/\:\
//   \  \::/~~~~  \  \:\  ~~~     \__\::/ \  \:\  /:/  \  \::/     \__\/  \:\
//    \  \:\       \  \:\         /__/:/   \  \:\/:/    \  \:\          \  \:\
//     \  \:\       \  \:\        \__\/     \  \::/      \  \:\          \__\/
//      \__\/        \__\/                   \__\/        \__\/
//
//
//////////////////////////////////////////////////////////////////////////////////

#ifndef COPYRIGHT_H_
#define COPYRIGHT_H_

/*

Knight's ScanLineZubber V1.0	(2008/12/20)

Copyright (C)  2008-2009  ZJU CAD&&CG State Key LAB.
Authors	: KNIGHT
Email	: liaoqiqi@cad.zju.edu.cn KnightLiao@gmail.com
Blog	: http://knightliao.blogspot.com/

All rights reserved.

*/

/*

Knight's ScanLineZubber V1.0	(2008/12/20)

	1.可以处理任意面体，可以处理任意多边形(除了凹多边形)
		
	2.实现两种绘制方式:	软件(扫描线Zbuffer算法)、硬件(OpenGL)的绘制方式
		
	3.模拟游戏引擎的写法,实现了引擎类,用于封装底层硬件的实现(OpenGL,DirectX),由于时间关系,只完成OpenGl代码的撰写
		
	4.实现了三种显示方式:	人工旋转、人工+自动旋转、自动旋转。
		
	5.对于硬件画法,具有是否开启反走样的功能选择

	6.可以对读入的模型进行旋转/放大缩小的变换.

	7.代码量2500行以上(不含机器自动生成的).

	------------------------------------------------------------------------------------------------
	只用于本程序的类有:
	1.KnightObj类.		封装了对OBJ模型数据的读取.
	2.KnightMesh类.		包含了软件实现/硬件实现 绘制 的封装.由它调用KnightMain来控制硬件.
	3.KnightActive类.	包含 活性多边形表类 和 活性边对表类
	4.KngihtBuffer类.	包含 帧缓存类 和 Zbuffer缓冲类
	5.KnightBucket类.	包含 多边形桶类 和 边桶类.

	---------------------------------------------------------------------------------------------
	为了方便程序的开发及以后大规模程序的开发 自已开发的程序文件有:
	1. Triple 三元类. 具有叉乘及普通加减乘除运算. 在处理三元结构,如法线,颜色RGB,坐标 等方面具有优势.
	2. Trace 调试类.  采用C++流或C流跟踪程序运行及其运行时动态数据. 特别是C++流的"<<"流重定向符 功能非常强大,可以输出任意类型.
		本程序构造了三个全局调试变量: 
			文件Log变量		:	跟踪程序运行
			程序断点设置变量	:	设置断点 观察出程序执行到的位置 及其数据
			程序动态数据变量	:	主要用于打印出一些要用到的较多的变量
		通过这三个变量打印出程序的流程走向 可以快速地找出程序出错的地方.
	3. Math库.	主要用于程序的一些数学公式的计算. 此库正在不停更新中.
	4. Global头文件. 主要用于放一些全局变量.例如调试变量就属于些类.
	3.KnightEngine类.	控制引擎类,实现了OpenGL和DirectX 操作的封装.
	4.KnightEngineInterface抽象类. OpenGl类和DirectX类都从此类继承. 定义了引擎的接口.
	5.KnightOpenGl类.	从KnightEngineInterface类继承而来,封装了底层操作
	6.KnightMain类.		主要用于控制KnightEngineInterface类. 它是用户调用的接口.

*/

#endif
